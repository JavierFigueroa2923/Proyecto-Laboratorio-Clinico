<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="Lst_tipo_sangre.GenerateMember" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>False</value>
  </metadata>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="PictureBox1.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        /9j/4AAQSkZJRgABAQEB9AH0AAD/4QHARXhpZgAATU0AKgAAAAgABwESAAMAAAABAAAAAAEaAAUAAAAB
        AAAAYgEbAAUAAAABAAAAagEoAAMAAAABAAIAAAExAAIAAAALAAAAcgEyAAIAAAAUAAAAfodpAAQAAAAB
        AAAAkgAAAX4AAAH0AAAAAQAAAfQAAAABUGljYXNhIDMuMAAAMjAwODowNjoyOSAxOTo0ODozOQAABJKG
        AAcAAAC2AAAAyKABAAMAAAAB//8AAKACAAQAAAABAAABLKADAAQAAAABAAABLAAAAABiAG8AcgBkAGUA
        cgAgAGIAcwA6ADAAIABiAGMAOgAjADAAMAAwADAAMAAwACAAcABzADoAMAAgAHAAYwA6ACMAZQBlAGUA
        ZQBlAGUAIABlAHMAOgAwACAAZQBjADoAIwAwADAAMAAwADAAMAAgAGMAawA6ADUAMAAwAGQAMAAyAGEA
        NABmADEAZgAxAGQANwA0ADkANwAzADQAMABjAGMANQA4ADYAOAA5ADYAYgBmADEAMQAAAAADARoABQAA
        AAEAAAGoARsABQAAAAEAAAGwASgAAwAAAAEAAgAAAAAAAAAAAfQAAAABAAAB9AAAAAH/2wBDAAYEBQYF
        BAYGBQYHBwYIChAKCgkJChQODwwQFxQYGBcUFhYaHSUfGhsjHBYWICwgIyYnKSopGR8tMC0oMCUoKSj/
        2wBDAQcHBwoIChMKChMoGhYaKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgo
        KCgoKCgoKCj/wAARCABkAGQDASIAAhEBAxEB/8QAHAAAAgMBAQEBAAAAAAAAAAAAAAcFBggEAwEC/8QA
        QhAAAgEDAQcBAwcICQUAAAAAAQIDAAQFEQYHEhMhMUFhFCJRMjZCUmJxdBUzcnOBsrPUCBcjJENTY5Wl
        goORoaL/xAAaAQADAQEBAQAAAAAAAAAAAAAAAwUEAgYB/8QAKxEAAgICAQMDAwMFAAAAAAAAAQIAAwQR
        IQUSMRMiQTJxsTPR8EJRYZGh/9oADAMBAAIRAxEAPwDVNFFcmQyNljVhbIXdvarNIIY2mkCB3OuignuT
        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
</value>
  </data>
</root>